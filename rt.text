<script>
  import { fade } from "svelte/transition";

  const carouselPhotos = [
    "https://picsum.photos/300/200?random=1",
    "https://picsum.photos/300/200?random=2",
    "https://picsum.photos/300/200?random=3",
  ];

  let index = 0;
  let duration = 4000;
  setInterval(function () {
    next();
  }, duration);
  const next = () => {
    index = (index + 1) % carouselPhotos.length;
  };
</script>

<div class="container">
<div class="box">
    {#each [carouselPhotos[index]] as src (index)}
      <img class="img-slider" transition:fade {src} alt="" />
    {/each}
  </div>
  <div class="box">
    <div class="info-box">
      <div class="info-text">
        <h1 class="info-title">Daniel Iuliano</h1>
        <p class="info-p">
          Lorem ipsum, dolor sit amet consectetur adipisicing elit. Tempora a
          fugit facilis?
        </p>
      </div>
      <div class="bottom-info" ><div class="btn-contact"><button>contact me</button></div>
      <div class="redes">
        <ul>
          <li>
            <a href="/"
              ><svg
                class="svg"
                role="img"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
                ><title>GitHub</title><path
                  d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"
                /></svg
              ></a
            >
          </li>
          <li>
            <a href="/"
              ><svg
                class="svg"
                role="img"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
                ><title>Twitter</title><path
                  d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"
                /></svg
              ></a
            >
          </li>
          <li>
            <a href="/"
              ><svg
                class="svg"
                role="img"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
                ><title>Instagram</title><path
                  d="M12 0C8.74 0 8.333.015 7.053.072 5.775.132 4.905.333 4.14.63c-.789.306-1.459.717-2.126 1.384S.935 3.35.63 4.14C.333 4.905.131 5.775.072 7.053.012 8.333 0 8.74 0 12s.015 3.667.072 4.947c.06 1.277.261 2.148.558 2.913.306.788.717 1.459 1.384 2.126.667.666 1.336 1.079 2.126 1.384.766.296 1.636.499 2.913.558C8.333 23.988 8.74 24 12 24s3.667-.015 4.947-.072c1.277-.06 2.148-.262 2.913-.558.788-.306 1.459-.718 2.126-1.384.666-.667 1.079-1.335 1.384-2.126.296-.765.499-1.636.558-2.913.06-1.28.072-1.687.072-4.947s-.015-3.667-.072-4.947c-.06-1.277-.262-2.149-.558-2.913-.306-.789-.718-1.459-1.384-2.126C21.319 1.347 20.651.935 19.86.63c-.765-.297-1.636-.499-2.913-.558C15.667.012 15.26 0 12 0zm0 2.16c3.203 0 3.585.016 4.85.071 1.17.055 1.805.249 2.227.415.562.217.96.477 1.382.896.419.42.679.819.896 1.381.164.422.36 1.057.413 2.227.057 1.266.07 1.646.07 4.85s-.015 3.585-.074 4.85c-.061 1.17-.256 1.805-.421 2.227-.224.562-.479.96-.899 1.382-.419.419-.824.679-1.38.896-.42.164-1.065.36-2.235.413-1.274.057-1.649.07-4.859.07-3.211 0-3.586-.015-4.859-.074-1.171-.061-1.816-.256-2.236-.421-.569-.224-.96-.479-1.379-.899-.421-.419-.69-.824-.9-1.38-.165-.42-.359-1.065-.42-2.235-.045-1.26-.061-1.649-.061-4.844 0-3.196.016-3.586.061-4.861.061-1.17.255-1.814.42-2.234.21-.57.479-.96.9-1.381.419-.419.81-.689 1.379-.898.42-.166 1.051-.361 2.221-.421 1.275-.045 1.65-.06 4.859-.06l.045.03zm0 3.678c-3.405 0-6.162 2.76-6.162 6.162 0 3.405 2.76 6.162 6.162 6.162 3.405 0 6.162-2.76 6.162-6.162 0-3.405-2.76-6.162-6.162-6.162zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4zm7.846-10.405c0 .795-.646 1.44-1.44 1.44-.795 0-1.44-.646-1.44-1.44 0-.794.646-1.439 1.44-1.439.793-.001 1.44.645 1.44 1.439z"
                /></svg
              ></a
            >
          </li>
        </ul>
      </div></div>
    </div>
  </div>
</div>

<style>
  .container {
    width: 90%;
    margin: 10px auto;
    height: 90%;
 
    display: flex;
  }
  .box {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 50%;
    height: 100%;
    margin: 0 20px;
  }

  .img-slider {
    position: absolute;
    border-radius: 5px;
    width: 100%;
    height: 100%;
    background-size: cover;
  }

  .info-box {
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: 40px;
    height: 100%;
  }

  .info-text {
    width: 90%;
  }


  .info-title{
    color: #fff;
    font-size: 3.5rem;
    text-transform: uppercase;
  }
  .info-p{
    color: #fff;
    font-weight: 200;
  }

  .bottom-info{
    display: flex;
    flex-direction: row-reverse;
    justify-content: space-between;
    align-items: center;
    
  }

  .btn-contact {
    text-align: end;
    margin-right: 15%;
  }
  .btn-contact button {
    background-color: aqua;
    border: none;
    border-radius: 5px;
    height: 40px;
    width: 120px;
    color: #333;
    text-transform: uppercase;
    cursor: pointer;
    transition: 0.1s ease-in-out;
    align-self: baseline;
   
  }
  .btn-contact button:hover {
    width: 125px;

    background-color:rgb(95, 255, 255);
  }

  .redes ul{
    display: flex;
  }
  .redes ul li {
    list-style: none;
    margin-right: 50%;
  }
  .redes ul li a {
    text-decoration: none;
    
  }
  .svg {
    width: 20px;
    height: 20px;
    fill: rgb(255, 134, 198);
  }




  <!-- 
	An almost direct copy and paste of: https://css-tricks.com/a-lightweight-masonry-solution
	Usage:
		- stretchFirst stretches the first item across the top
  <Masonry stretchFirst={true} >
    {#each data as o}
      <div class="_card _padding">
        Here's some stuff {o.name}
        <header>
          <h3>{o.name}</h3>
        </header>
        <section>
          <p>{o.text}</p> 
        </section>
      </div>
    {/each}
  </Masonry>
 -->



 <div bind:this={masonryElement} 
 class={`__grid--masonry ${stretchFirst ? '__stretch-first' : ''}`}
 style={`--grid-gap: ${gridGap}; --col-width: ${colWidth};`}
 >
<slot></slot>
</div>



<script>
import { onMount, onDestroy, getContext, setContext, tick } from 'svelte'
export let  stretchFirst = false,
        gridGap = '0.5em',
        colWidth = 'minmax(Min(20em, 100%), 1fr)',
                    items = [] // pass in data if it's dynamically updated
let grids = [], masonryElement

const refreshLayout = async () => {
grids.forEach(async grid => {
/* get the post relayout number of columns */
let ncol = getComputedStyle(grid._el).gridTemplateColumns.split(' ').length
    
grid.items.forEach(c => {
  let new_h = c.getBoundingClientRect().height;
  
  if(new_h !== +c.dataset.h) {
    c.dataset.h = new_h
    grid.mod++
  }
});

/* if the number of columns has changed */
if(grid.ncol !== ncol || grid.mod) {
  /* update number of columns */ 
  grid.ncol = ncol;
  /* revert to initial positioning, no margin */
  grid.items.forEach(c => c.style.removeProperty('margin-top'))
  /* if we have more than one column */
  if(grid.ncol > 1) {
    grid.items.slice(ncol).forEach((c, i) => {
      let prev_fin = grid.items[i].getBoundingClientRect().bottom /* bottom edge of item above */, 
            curr_ini = c.getBoundingClientRect().top /* top edge of current item */;
      
      c.style.marginTop = `${prev_fin + grid.gap - curr_ini}px`
    })
  }
  
  grid.mod = 0
}
})
}

const calcGrid = async (_masonryArr) => {
await tick()
if(_masonryArr.length && getComputedStyle(_masonryArr[0]).gridTemplateRows !== 'masonry') {
grids = _masonryArr.map(grid => {
            return {
                _el: grid, 
                gap: parseFloat(getComputedStyle(grid).gridRowGap),
                items: [...grid.childNodes].filter(c => c.nodeType === 1 && +getComputedStyle(c).gridColumnEnd !== -1), 
                ncol: 0, 
                mod: 0
            }
    })
refreshLayout() /* initial load */
}
}




let _window
onMount(() => {
_window = window
_window.addEventListener('resize', refreshLayout, false) /* on resize */
})
onDestroy(() => {
if(_window) {
  _window.removeEventListener('resize', refreshLayout, false) /* on resize */
}
})


$: if(masonryElement) {
calcGrid([masonryElement])
}

$: if(items) { // update if items are changed
masonryElement = masonryElement // refresh masonryElement
}
</script>

<!-- 
$w: var(--col-width); // minmax(Min(20em, 100%), 1fr);
$s: var(--grid-gap); // .5em;
-->

<style>
:global(.__grid--masonry) {
  display: grid;
  grid-template-columns: repeat(auto-fit, var(--col-width));
  grid-template-rows: masonry;
  justify-content: center;
  grid-gap: var(--grid-gap);
  padding: var(--grid-gap);
  
}
:global(.__grid--masonry > *) { 
    align-self: start 
}
:global(.__grid--masonry.__stretch-first > *:first-child) { 
  grid-column: 1/ 0;
}
</style>


<script> 
  import Character from "./Characters.svelte";
  import Masonry from './Masonry.svelte'

let characters = [];
let page = 1;



async function loadCharacter() {
  const res = await fetch(
    "https://rickandmortyapi.com/api/character?page=" + page
  );
  const data = await res.json();
  characters = data.results;
}
loadCharacter();
 
    
    </script>
  
      <div>
        <Masonry stretchFirst={true} gridGap={'0.75rem'} colWidth={'minmax(Min(20em, 100%), 1fr)'}>
            {#each characters as character}
             
                <Character {character} />
    
            {/each}
             
       
          </Masonry>
      </div>
    
      
      <style>
        
   
          div {
            height: auto;
          }

      </style>